pipeline {
  agent any

  options { timestamps() }

  triggers { pollSCM('*/2 * * * *') }

  environment {
    QA_CONTAINER     = '1990193p-qa-svr'
    PROD_CONTAINER   = '1990193p-prod-svr'
    QA_BACKUP_IMG    = 'qa-bkup-image'
    PROD_BACKUP_IMG  = 'prod-bkup-image'
    QA_URL           = 'http://192.168.100.110:33200/index.html'
    PROD_URL         = 'http://192.168.100.220:33500/index.html'
    BOLT_SCRIPT_PATH = './1990193p_script'
  }

  stages {

    stage('Op-1990193p-S1') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'clientadm-creds', passwordVariable: 'BOLT_PASS', usernameVariable: 'BOLT_USER')]) {
          echo 'Creating QA backup & updating QA with new index.html...'
          sh """
            set -e
            docker rmi -f \$QA_BACKUP_IMG || true
            docker commit \$QA_CONTAINER \$QA_BACKUP_IMG
            bolt script run "\$BOLT_SCRIPT_PATH" -t \$QA_CONTAINER --user \$BOLT_USER --password \$BOLT_PASS
          """
          echo 'Op-S1-1990193p: QA web server is backup and updated'
        }
      }
    }

    stage('Op-1990193p-S2') {
      steps {
        sh 'curl -f ${QA_URL} >/dev/null'
        echo 'Op-1990193p-S2: Checking on whether QA server is running after update'
      }
    }

    stage('Op-1990193p-S3') {
      steps {
        script {
          def choice = input message: 'QA result: Proceed to roll out to Prod or Roll back QA?',
            parameters: [choice(name: 'Action', choices: ['Proceed','Rollback'], description: 'Pick one')]

          if (choice == 'Rollback') {
            sh """
              docker rm -f \$QA_CONTAINER || true
              docker run -d --name \$QA_CONTAINER -p 33200:80 \$QA_BACKUP_IMG
            """
            echo 'Op-1990193p-S3: QA server fails after update and is rolled back'
            error('Aborting')
          } else {
            echo 'Op-1990193p-S3: Proceed to roll out to Prod server'
          }
        }
      }
    }

    stage('Op-1990193p-S4') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'clientadm-creds', passwordVariable: 'BOLT_PASS', usernameVariable: 'BOLT_USER')]) {
          echo 'Creating Prod backup & updating Prod with new index.html...'
          sh """
            docker rmi -f \$PROD_BACKUP_IMG || true
            docker commit \$PROD_CONTAINER \$PROD_BACKUP_IMG
            bolt script run "\$BOLT_SCRIPT_PATH" -t \$PROD_CONTAINER --user \$BOLT_USER --password \$BOLT_PASS
          """
          echo 'Op-1990193p-S4: Prod web server is backup and updated'
        }
      }
    }

    stage('Op-1990193p-S5') {
      steps {
        sh 'curl -f ${PROD_URL} >/dev/null'
        echo 'Op-1990193p-S5: Checking on whether Prod server is running after update'
      }
    }

    stage('Op-1990193p-S6') {
      steps {
        script {
          def choice = input message: 'Prod result: Release to production or Roll back Prod?',
            parameters: [choice(name: 'Action', choices: ['Release','Rollback'], description: 'Pick one')]

          if (choice == 'Rollback') {
            sh """
              docker rm -f \$PROD_CONTAINER || true
              docker run -d --name \$PROD_CONTAINER -p 33500:80 \$PROD_BACKUP_IMG
            """
            echo 'Op-1990193p-S6: Prod web server is rolled back'
            error('Aborting')
          } else {
            echo 'Op-1990193p-S6: Proceed to release Prod web server to production'
          }
        }
      }
    }

    stage('Op-1990193p-S7') {
      steps {
        echo 'Op-1990193p-S7: Prod web server is monitored and ready to serve.'
      }
    }
  }
}
